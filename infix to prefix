#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_SIZE 100

struct Stack {
    int top;
    unsigned capacity;
    char* array;
};

struct Stack* createStack(unsigned capacity) {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->array = (char*)malloc(stack->capacity * sizeof(char));
    return stack;
}

int isFull(struct Stack* stack) {
    return stack->top == stack->capacity - 1;
}

int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

void push(struct Stack* stack, char item) {
    if (isFull(stack))
        return;
    stack->array[++stack->top] = item;
}

char pop(struct Stack* stack) {
    if (isEmpty(stack))
        return '\0';
    return stack->array[stack->top--];
}

int isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

int precedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    else if (op == '*' || op == '/')
        return 2;
    return 0;
}

void reverseString(char* str) {
    int left = 0;
    int right = strlen(str) - 1;
    while (left < right) {
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}

void infixToPrefix(char* infix, char* prefix) {
    struct Stack* stack = createStack(MAX_SIZE);
    int i = 0, j = 0, len = strlen(infix); // Variable declarations at the beginning

    reverseString(infix);

    for (i = 0; i < len; i++) {
        if (isalnum(infix[i])) {
            prefix[j++] = infix[i];
        } else if (infix[i] == ')') {
            push(stack, infix[i]);
        } else if (infix[i] == '(') {
            while (!isEmpty(stack) && stack->array[stack->top] != ')')
                prefix[j++] = pop(stack);
            if (!isEmpty(stack) && stack->array[stack->top] != ')')
                return; // Invalid expression
            else
                pop(stack);
        } else if (isOperator(infix[i])) {
            while (!isEmpty(stack) && precedence(infix[i]) < precedence(stack->array[stack->top]))
                prefix[j++] = pop(stack);
            push(stack, infix[i]);
        }
    }

    while (!isEmpty(stack))
        prefix[j++] = pop(stack);

    prefix[j] = '\0';
    reverseString(prefix);
}

int evaluatePrefix(char* prefix) {
    struct Stack* stack = createStack(MAX_SIZE);
    int i = 0, operand1, operand2, result = 0, len = strlen(prefix);

    for (i = 0; i < len; i++) {
        if (isdigit(prefix[i])) {
            push(stack, prefix[i] - '0');
        } else if (isOperator(prefix[i])) {
            operand2 = pop(stack);
            operand1 = pop(stack);
            switch (prefix[i]) {
                case '+':
                    result = operand1 + operand2;
                    break;
                case '-':
                    result = operand1 - operand2;
                    break;
                case '*':
                    result = operand1 * operand2;
                    break;
                case '/':
                    if (operand2 != 0)
                        result = operand1 / operand2;
                    else {
                        printf("Error: Division by zero\n");
                        exit(EXIT_FAILURE);
                    }
                    break;
            }
            push(stack, result);
        }
    }

    return pop(stack);
}

int main() {
    char infix[MAX_SIZE], prefix[MAX_SIZE];
    int i, len, result; // Declare variables at the beginning

    printf("Enter an infix expression: ");
    scanf("%s", infix);
    infixToPrefix(infix, prefix);
    printf("Prefix expression: %s\n", prefix);

    len = strlen(prefix);
    result = evaluatePrefix(prefix);
    printf("Result after evaluation: %d\n", result);

    return 0;
}
