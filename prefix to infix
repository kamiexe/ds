void prefixToInfix(char prefix[]) {
    int length = strlen(prefix);
    struct Stack stack;
    initialize(&stack);

    // Process each character of the prefix expression from right to left
    for (int i = length - 1; i >= 0; i--) {
        char symbol = prefix[i];

        // If the symbol is an operand, push it onto the stack
        if (isOperand(symbol)) {
            push(&stack, symbol);
        } else {
            // If the symbol is an operator, pop two operands from the stack,
            // concatenate them with the operator in between, and push the resulting expression back onto the stack
            char operand1 = pop(&stack);
            char operand2 = pop(&stack);
            char infixExpression[MAX_SIZE];
            sprintf(infixExpression, "(%c%c%c)", operand1, symbol, operand2);
            push(&stack, infixExpression[0]);
        }
    }

    // The stack now contains the final infix expression
    printf("Infix expression: %s\n", stack.items);
}

int main() {
    char prefix[MAX_SIZE];

    printf("Enter a prefix expression: ");
    scanf("%s", prefix);

    prefixToInfix(prefix);

    return 0;
}
