#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 5

int deque[MAX_SIZE];
int front = -1, rear = -1;
int isFull() {
    if ((front == 0 && rear == MAX_SIZE - 1) || (front == rear + 1))
        return 1;
    else
        return 0;
}
int isEmpty() {
    if (front == -1)
        return 1;
    else
        return 0;
}
void insertFront(int data) {
    if (isFull()) {
        printf("Deque is full. Cannot insert at front.\n");
    } else {
        if (front == -1) {
            front = 0;
            rear = 0;
        } else if (front == 0) {
            front = MAX_SIZE - 1;
        } else {
            front--;
        }
        deque[front] = data;
        printf("%d inserted at the front of the deque.\n", data);
    }
}
void insertRear(int data) {
    if (isFull()) {
        printf("Deque is full. Cannot insert at rear.\n");
    } else {
        if (front == -1) {
            front = 0;
            rear = 0;
        } else if (rear == MAX_SIZE - 1) {
            rear = 0;
        } else {
            rear++;
        }
        deque[rear] = data;
        printf("%d inserted at the rear of the deque.\n", data);
    }
}
void deleteFront() {
    if (isEmpty()) {
        printf("Deque is empty. Cannot delete from front.\n");
    } else {
        printf("%d deleted from the front of the deque.\n", deque[front]);
        if (front == rear) {
            front = -1;
            rear = -1;
        } else if (front == MAX_SIZE - 1) {
            front = 0;
        } else {
            front++;
        }
    }
}
void deleteRear() {
    if (isEmpty()) {
        printf("Deque is empty. Cannot delete from rear.\n");
    } else {
        printf("%d deleted from the rear of the deque.\n", deque[rear]);
        if (front == rear) {
            front = -1;
            rear = -1;
        } else if (rear == 0) {
            rear = MAX_SIZE - 1;
        } else {
            rear--;
        }
    }
}
void display() {
    int i;
    if (isEmpty()) {
        printf("Deque is empty.\n");
    } else {
        printf("Deque elements: ");
        for (i = front; i != rear; i = (i + 1) % MAX_SIZE) {
            printf("%d ", deque[i]);
        }
        printf("%d\n", deque[i]);
    }
}
int main() {
    insertRear(1);
    insertRear(2);
    insertFront(3);
    insertFront(4);
    display();
    deleteFront();
    deleteRear();
    display();
    insertFront(5);
    insertRear(6);
    display();
getch();
clrscr();
    return 0;
}
